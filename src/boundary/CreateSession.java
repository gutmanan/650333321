/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boundary;

import entity.Musician;
import businessLogic.CreateSessionControl;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import entity.Room;
import entity.SoundMan;
import businessLogic.SessionsInTheRoom;
import businessLogic.StudioRatesControl;
import businessLogic.WindowManager;
import entity.E_ROLE;
import entity.RatingBarCell;
import entity.SoundManInSession;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.JXDatePicker;

/**
 *
 * @author Shai Gutman
 */
public class CreateSession extends javax.swing.JPanel {
        private int selectedStud;
        private ArrayList<Room> selecRoom;
        private HashMap<Integer, String> soundmanKey;
    public CreateSession() {
        if (WindowManager.getTmpArtist() == null)
            return;
        initComponents();
        selecRoom = new ArrayList<Room>();
        soundmanKey = new HashMap<>();
        for (Map.Entry<String, ArrayList<java.util.Date>> entry : SessionsInTheRoom.getXML().getOccupied().entrySet()) {
            String key = entry.getKey();
            if (key.equals(WindowManager.getTmpArtist().getAlphaCode())) {
                ArrayList<java.util.Date> value = entry.getValue();
                sessionDatePicker.getMonthView().setUnselectableDates(value.toArray(new java.util.Date[value.size()]));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        soundmansTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomsTable = new javax.swing.JTable() {
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                    return String.class;
                    case 1:
                    return String.class;
                    case 2:
                    return Double.class;
                    case 3:
                    return JComboBox.class;
                    case 4:
                    return Double.class;
                    default:
                    return Boolean.class;
                }
            }
        };
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        endTextField = new javax.swing.JTextField();
        soundmansLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        roomsLabel = new javax.swing.JLabel();
        clickLabel = new javax.swing.JLabel();
        foravailLabel = new javax.swing.JLabel();
        studioComboBox = new javax.swing.JComboBox<>();
        createButton = new javax.swing.JButton();
        inviteButton = new javax.swing.JButton();
        startTextField = new javax.swing.JTextField();
        availstudiosLabel = new javax.swing.JLabel();
        sessionDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        wallpaper = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(null);

        jScrollPane2.setVisible(false);

        jScrollPane2.setViewportView(soundmansTable);
        if (soundmansTable.getColumnModel().getColumnCount() > 0) {
            soundmansTable.getColumnModel().getColumn(0).setResizable(false);
            soundmansTable.getColumnModel().getColumn(0).setPreferredWidth(140);
            soundmansTable.getColumnModel().getColumn(1).setResizable(false);
            soundmansTable.getColumnModel().getColumn(2).setResizable(false);
            soundmansTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2);
        jScrollPane2.setBounds(270, 190, 470, 140);

        jScrollPane1.setVisible(false);

        roomsTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                roomsTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(roomsTable);
        if (roomsTable.getColumnModel().getColumnCount() > 0) {
            roomsTable.getColumnModel().getColumn(0).setResizable(false);
            roomsTable.getColumnModel().getColumn(1).setResizable(false);
            roomsTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(40, 190, 200, 140);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);
        jPanel1.setVisible(false);

        jScrollPane3.setViewportView(jTable3);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(0, 0, 700, 170);

        add(jPanel1);
        jPanel1.setBounds(40, 390, 700, 170);
        add(endTextField);
        endTextField.setBounds(490, 60, 60, 26);

        soundmansLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        soundmansLabel.setForeground(new java.awt.Color(0, 0, 0));
        soundmansLabel.setText("Soundmans:");
        soundmansLabel.setVisible(false);
        add(soundmansLabel);
        soundmansLabel.setBounds(270, 160, 110, 20);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Description:");
        add(jLabel12);
        jLabel12.setBounds(590, 160, 240, 20);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Phone number:");
        add(jLabel11);
        jLabel11.setBounds(590, 140, 240, 20);

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Email:");
        add(jLabel10);
        jLabel10.setBounds(590, 120, 240, 20);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Address:");
        add(jLabel9);
        jLabel9.setBounds(590, 100, 240, 20);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Name:");
        add(jLabel8);
        jLabel8.setBounds(590, 80, 240, 20);

        jLabel7.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel11.setVisible(false);
        jLabel12.setVisible(false);
        jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("About studio:");
        add(jLabel7);
        jLabel7.setBounds(590, 60, 150, 20);

        roomsLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        roomsLabel.setForeground(new java.awt.Color(0, 0, 0));
        roomsLabel.setText("Rooms:");
        roomsLabel.setVisible(false);
        add(roomsLabel);
        roomsLabel.setBounds(40, 160, 70, 20);

        Font font = clickLabel.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        clickLabel.setFont(font.deriveFont(attributes));
        clickLabel.setForeground(new java.awt.Color(0, 0, 204));
        clickLabel.setText("click here");
        clickLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clickLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickLabelMouseClicked(evt);
            }
        });
        add(clickLabel);
        clickLabel.setBounds(180, 90, 90, 20);

        foravailLabel.setForeground(new java.awt.Color(0, 0, 0));
        foravailLabel.setText("*for all available studios ");
        add(foravailLabel);
        foravailLabel.setBounds(40, 90, 170, 20);

        studioComboBox.addItem("Select Studio");
        studioComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                studioComboBoxItemStateChanged(evt);
            }
        });
        studioComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studioComboBoxActionPerformed(evt);
            }
        });
        studioComboBox.setVisible(false);
        add(studioComboBox);
        studioComboBox.setBounds(160, 120, 120, 25);

        createButton.setText("Create Session");
        createButton.setVisible(false);
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        add(createButton);
        createButton.setBounds(340, 350, 140, 26);

        inviteButton.setText("Invite Musicians");
        inviteButton.setVisible(false);
        inviteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteButtonActionPerformed(evt);
            }
        });
        add(inviteButton);
        inviteButton.setBounds(170, 350, 140, 26);
        add(startTextField);
        startTextField.setBounds(370, 60, 60, 26);

        availstudiosLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        availstudiosLabel.setForeground(new java.awt.Color(0, 0, 0));
        availstudiosLabel.setText("Available Studio:");
        availstudiosLabel.setVisible(false);
        add(availstudiosLabel);
        availstudiosLabel.setBounds(40, 120, 130, 20);

        sessionDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sessionDatePickerActionPerformed(evt);
            }
        });
        sessionDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sessionDatePickerPropertyChange(evt);
            }
        });
        add(sessionDatePicker);
        sessionDatePicker.setBounds(160, 60, 120, 26);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Until:");
        add(jLabel6);
        jLabel6.setBounds(440, 60, 60, 30);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Start time:");
        add(jLabel5);
        jLabel5.setBounds(300, 60, 80, 30);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Create Session");
        add(jLabel3);
        jLabel3.setBounds(0, 10, 850, 40);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Session's date:");
        add(jLabel2);
        jLabel2.setBounds(40, 60, 130, 30);

        wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/container3.png"))); // NOI18N
        add(wallpaper);
        wallpaper.setBounds(0, 0, 850, 580);
    }// </editor-fold>//GEN-END:initComponents

    private void sessionDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sessionDatePickerActionPerformed
        //sessionDatePicker.setEditable(false);
    }//GEN-LAST:event_sessionDatePickerActionPerformed

    private void studioComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_studioComboBoxItemStateChanged
        
    }//GEN-LAST:event_studioComboBoxItemStateChanged

    private void sessionDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_sessionDatePickerPropertyChange
        
    }//GEN-LAST:event_sessionDatePickerPropertyChange

    private void studioComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studioComboBoxActionPerformed
        if (studioComboBox.getSelectedItem() == null || studioComboBox.getSelectedIndex() == 0) {
            return;
        }
        selectedStud = Integer.valueOf(String.valueOf(studioComboBox.getSelectedItem()));
        roomsLabel.setVisible(true);
        soundmansLabel.setVisible(true);
        jScrollPane1.setVisible(true);
        jScrollPane2.setVisible(true);
        inviteButton.setVisible(true);
        createButton.setVisible(true);
        jLabel7.setVisible(true);
        jLabel8.setVisible(true);
        jLabel9.setVisible(true);
        jLabel10.setVisible(true);
        jLabel11.setVisible(true);
        jLabel12.setVisible(true);
        jLabel8.setText("Name: ");
        jLabel9.setText("Address: ");
        jLabel10.setText("Email: ");
        jLabel11.setText("Phone number: ");
        jLabel12.setText("Description: ");
        Date selectedDate = new Date(sessionDatePicker.getDate().getTime()); 
        java.util.Date selectedStart = sessionDatePicker.getDate();
        java.util.Date selectedEnd = sessionDatePicker.getDate();
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int col) {
                 switch (col) {
                     case 2:
                         return true;
                     default:
                         return false;
                  }
            }
        }; 
        roomsTable.setModel(model);
        model.addColumn("Room No."); 
        model.addColumn("Rec. Cell"); 
        model.addColumn("Reserve");
        TableColumn tc = roomsTable.getColumnModel().getColumn(1);
        tc.setCellEditor(roomsTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(roomsTable.getDefaultRenderer(Boolean.class));
        TableColumn tc2 = roomsTable.getColumnModel().getColumn(2);
        tc2.setCellEditor(roomsTable.getDefaultEditor(Boolean.class));
        tc2.setCellRenderer(roomsTable.getDefaultRenderer(Boolean.class));
        
        HashMap<Integer, ArrayList<Integer>> studiosRooms = CreateSessionControl.getAvailableStudioRooms(selectedDate, startTextField.getText(), endTextField.getText());
        for (Map.Entry<Integer, ArrayList<Integer>> entries : studiosRooms.entrySet()) {
            Integer key = entries.getKey();
            ArrayList<Integer> value =  entries.getValue();
            if (String.valueOf(key).equals(String.valueOf(studioComboBox.getSelectedItem()))) {
                try {
                    model.setRowCount(0);
                    for (Integer room : value) {
                        Room tmpRoom = CreateSessionControl.getRoom(key, room);
                        model.addRow(new Object[]{tmpRoom.getRoomNum(),tmpRoom.isRecordingCell(), false});
                    }
                    ResultSet rs = SessionsInTheRoom.getDB().query("SELECT tblStudio.*\n" +
                                                           "FROM tblStudio\n" +
                                                           "WHERE tblStudio.studioNumber="+key+";");
                    while (rs.next()) {                        
                        jLabel8.setText(jLabel8.getText()+" "+rs.getString(2));
                        jLabel9.setText(jLabel9.getText()+" "+rs.getString(6));
                        jLabel10.setText(jLabel10.getText()+" "+rs.getString(4));
                        jLabel11.setText(jLabel11.getText()+" "+rs.getString(5));
                        jLabel12.setText(jLabel12.getText()+" "+rs.getString(3));
                    }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreateSession.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            roomsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (roomsTable.getSelectedRow() > -1) {
                    }                
                }
            });
        }
        DefaultTableModel model2 = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int col) {
                 if (getValueAt(row, col) == null) {
                    return true;
                } else return false;
            }
        }; 
        soundmansTable.setModel(model2);
        model2.addColumn("Name");
        model2.addColumn("Producer"); 
        model2.addColumn("Mix tech.");
        model2.addColumn("Master tech.");
        model2.addColumn("Total pay");
        model2.addColumn("Advanced pay");
        soundmansTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        TableColumn tc1 = soundmansTable.getColumnModel().getColumn(1);
        tc1.setCellEditor(soundmansTable.getDefaultEditor(Boolean.class));
        tc1.setCellRenderer(soundmansTable.getDefaultRenderer(Boolean.class));
        TableColumn tc4 = soundmansTable.getColumnModel().getColumn(2);
        tc4.setCellEditor(soundmansTable.getDefaultEditor(Boolean.class));
        tc4.setCellRenderer(soundmansTable.getDefaultRenderer(Boolean.class));
        TableColumn tc5 = soundmansTable.getColumnModel().getColumn(3);
        tc5.setCellEditor(soundmansTable.getDefaultEditor(Boolean.class));
        tc5.setCellRenderer(soundmansTable.getDefaultRenderer(Boolean.class));
        soundmansTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (soundmansTable.getSelectedRow() > -1) {
                }                
            }
        });
        HashMap<String,SoundMan> availableSoundmans = CreateSessionControl.getAvailableSoundmans(selectedDate, startTextField.getText(), endTextField.getText(),String.valueOf(studioComboBox.getSelectedItem()));
        for (Map.Entry<String, SoundMan> entries : availableSoundmans.entrySet()) {
            String key = entries.getKey();
            SoundMan value =  entries.getValue();
            String name = null;
            if (CreateSessionControl.getFreelancer(key) != null) {
                name = CreateSessionControl.getFreelancer(key).getFirst()+" "+CreateSessionControl.getFreelancer(key).getLast();
            }
            model2.addRow(new Object[]{name,value.isProducer()?null:false,
                                            value.isMixTech()?null:false,
                                            value.isMasterTech()?null:false,
                                            value.getTotalPayment(),
                                            value.getAdvancePay()});
            if (soundmansTable.getRowCount()-1 >= 0) {
                soundmanKey.put(soundmansTable.getRowCount()-1, key);
            }
        }
    }//GEN-LAST:event_studioComboBoxActionPerformed

    private void roomsTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_roomsTablePropertyChange

    }//GEN-LAST:event_roomsTablePropertyChange

    private void inviteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteButtonActionPerformed
        if (sessionDatePicker.getDate() == null) {
            return;
        }
        ArrayList<String> rooms = new ArrayList();
        for (int i = 0; i < roomsTable.getRowCount(); i++) {
            if ((Boolean)roomsTable.getValueAt(i, 2)) {
                    rooms.add(String.valueOf(roomsTable.getValueAt(i, 0)));
            }
        }
        jPanel1.setVisible(true);
        jPanel1.setBounds(40, 390, 700, 170);
        Date selectedDate = new Date(sessionDatePicker.getDate().getTime());
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int col) {
                 switch (col) {
                     case 4:
                         return true;
                     case 5:
                         return true;
                     default:
                         return false;
                  }
            }
        };
        jTable3.setModel(model);
        model.addColumn("Name"); 
        model.addColumn("Specialization");
        model.addColumn("Wage"); 
        model.addColumn("Rank"); 
        model.addColumn("Invite");
        model.addColumn("Room"); 
        jTable3.setRowHeight(30);
        TableColumn tc = jTable3.getColumnModel().getColumn(4);
        tc.setCellEditor(jTable3.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(jTable3.getDefaultRenderer(Boolean.class));
        TableColumn tc2 = jTable3.getColumnModel().getColumn(5);
        tc2.setCellEditor(new DefaultCellEditor(new JComboBox<String>(rooms.toArray(new String[rooms.size()]))));
        TableColumn tc3 = jTable3.getColumnModel().getColumn(3);
        selectedStud = Integer.valueOf(String.valueOf(studioComboBox.getSelectedItem()));
        HashMap<String, Musician> availableMusicition = CreateSessionControl.getAvailableMusicition(selectedDate, startTextField.getText(), endTextField.getText(),selectedStud);
        for (Map.Entry<String, Musician> entries : availableMusicition.entrySet()) {
            String key = entries.getKey();
            Musician value =  entries.getValue();
            RatingBarCell rbc = new RatingBarCell();
            tc3.setCellEditor(rbc);
            tc3.setCellRenderer(rbc);
            rbc.getCellEditorValue().setRate(StudioRatesControl.getRankOf(selectedStud, key));
            String name = CreateSessionControl.getFreelancer(key).getFirst()+" "+CreateSessionControl.getFreelancer(key).getLast();
            model.addRow(new Object[]{name,value.getType(),value.getCommission(),rbc.getCellEditorValue(),false,"Select Room"});
        }
        jTable3.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (jTable3.getSelectedRow() > -1) {
                    if (jTable3.getSelectedColumn() == 5 && !((Boolean)(jTable3.getValueAt(jTable3.getSelectedRow(), 4)))) {
                        JOptionPane.showMessageDialog(null, "Please invite the musician first", "Input Warning", JOptionPane.WARNING_MESSAGE);
                        jTable3.setValueAt("Select Room",jTable3.getSelectedRow(), 5);
                        return;
                    }
                }       
            }
        });
    }//GEN-LAST:event_inviteButtonActionPerformed

    private void clickLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickLabelMouseClicked
        if (sessionDatePicker.getDate() == null) {
            return;
        }
        if (startTextField.getText().equals(endTextField.getText()) || (Integer.valueOf(startTextField.getText()).compareTo(Integer.valueOf(endTextField.getText()))) > 0) {
            JOptionPane.showMessageDialog(WindowManager.getMainFrame(), "End time must be greater than start time", "Input Warning", JOptionPane.WARNING_MESSAGE);
            startTextField.setText("");
            endTextField.setText("");
            studioComboBox.setSelectedIndex(0);
            return;
        }
        availstudiosLabel.setVisible(true);
        studioComboBox.setVisible(true);
        Date selectedDate = new Date(sessionDatePicker.getDate().getTime()); 
        HashMap<Integer, ArrayList<Integer>> studiosRooms = CreateSessionControl.getAvailableStudioRooms(selectedDate, startTextField.getText(), endTextField.getText());
        for (Integer studio : studiosRooms.keySet()) {
            studioComboBox.addItem(String.valueOf(studio));
        }
    }//GEN-LAST:event_clickLabelMouseClicked

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        int generated = CreateSessionControl.newSession(new Timestamp(sessionDatePicker.getDate().getTime()), startTextField.getText(), endTextField.getText(), WindowManager.getTmpArtist().getAlphaCode());
        int counter = 0;
        for (Room room : selecRoom) {
            if (generated > 0 && CreateSessionControl.newSessionLocation(generated, selectedStud, room.getRoomNum())) {
                counter++;
            }
        }
        for (int i = 0; i < soundmansTable.getRowCount(); i++) {
            CreateSessionControl.newSoundmanInSession(soundmanKey.get(i), generated, 
                        (boolean)soundmansTable.getValueAt(i, 1),
                        (boolean)soundmansTable.getValueAt(i, 2),
                        (boolean)soundmansTable.getValueAt(i, 3));
        }
        if (counter == selecRoom.size()) {
            JOptionPane.showMessageDialog(null,
                "Session was created successfully!",
                "Setup complete",
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }//GEN-LAST:event_createButtonActionPerformed

    public boolean confirmRooms() {
        boolean flag = false;
        for (int i = 0; i < roomsTable.getRowCount(); i++) {
            if ((Boolean)roomsTable.getValueAt(i, 2)) {
                selecRoom.add(new Room(selectedStud, (Integer)roomsTable.getValueAt(i, 0), (Boolean)roomsTable.getValueAt(i, 1)));
            }
        }     
        for (Room room : selecRoom) {
            if (room.isRecordingCell()) {
                flag = true;
            }
        }
        if (!flag) {
            JOptionPane.showMessageDialog(null,
                "You must select at least one room with recording cell!",
                "Input error",
                JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return flag;
    } 
    
    public boolean confirmSoundmans() {
        int anotherCounter = 0;
        for (int i = 0; i < soundmansTable.getRowCount(); i++) {
            if (!(!(boolean)soundmansTable.getValueAt(i, 1) && !(boolean)soundmansTable.getValueAt(i, 2)&&!(boolean)soundmansTable.getValueAt(i, 3))) {
                anotherCounter++;
            }
        }
        if (anotherCounter < 1) {
            JOptionPane.showMessageDialog(null,
                "You must select at least one soundman!",
                "Input error",
                JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel availstudiosLabel;
    private javax.swing.JLabel clickLabel;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField endTextField;
    private javax.swing.JLabel foravailLabel;
    private javax.swing.JButton inviteButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel roomsLabel;
    private javax.swing.JTable roomsTable;
    private org.jdesktop.swingx.JXDatePicker sessionDatePicker;
    private javax.swing.JLabel soundmansLabel;
    private javax.swing.JTable soundmansTable;
    private javax.swing.JTextField startTextField;
    private javax.swing.JComboBox<String> studioComboBox;
    private javax.swing.JLabel wallpaper;
    // End of variables declaration//GEN-END:variables
}
