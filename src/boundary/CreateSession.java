/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boundary;

import entity.Musician;
import businessLogic.CreateSessionControll;
import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import entity.Room;
import entity.SoundMan;
import businessLogic.SessionsInTheRoom;
import businessLogic.WindowManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Shai Gutman
 */
public class CreateSession extends javax.swing.JPanel {
    
    CreateSessionControll csController;
    
    public CreateSession() {
        if (WindowManager.getTmpArtist() == null)
            return;
        initComponents();
        for (Map.Entry<String, ArrayList<java.util.Date>> entry : SessionsInTheRoom.getXML().getOccupied().entrySet()) {
            String key = entry.getKey();
            if (key.equals(WindowManager.getTmpArtist().getAlphaCode())) {
                ArrayList<java.util.Date> value = entry.getValue();
                jXDatePicker1.getMonthView().setUnselectableDates(value.toArray(new java.util.Date[value.size()]));
            }
        }
        csController = new CreateSessionControll();
        java.util.Date d = new java.util.Date();
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        jSpinner2.setValue(d);
        jSpinner3.setValue(d);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable() {
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                    return String.class;
                    case 1:
                    return String.class;
                    case 2:
                    return Double.class;
                    case 3:
                    return JComboBox.class;
                    case 4:
                    return Double.class;
                    default:
                    return Boolean.class;
                }
            }
        };
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(null);

        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(140);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2);
        jScrollPane2.setBounds(270, 190, 470, 140);

        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(40, 190, 200, 140);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);
        jPanel1.setVisible(false);

        jScrollPane3.setViewportView(jTable3);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(0, 0, 700, 170);

        add(jPanel1);
        jPanel1.setBounds(40, 390, 700, 170);

        jLabel13.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Soundmans:");
        add(jLabel13);
        jLabel13.setBounds(270, 160, 110, 20);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Description:");
        add(jLabel12);
        jLabel12.setBounds(590, 160, 240, 20);

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Phone number:");
        add(jLabel11);
        jLabel11.setBounds(590, 140, 240, 20);

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Email:");
        add(jLabel10);
        jLabel10.setBounds(590, 120, 240, 20);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Address:");
        add(jLabel9);
        jLabel9.setBounds(590, 100, 240, 20);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Name:");
        add(jLabel8);
        jLabel8.setBounds(590, 80, 240, 20);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("About studio:");
        add(jLabel7);
        jLabel7.setBounds(590, 60, 150, 20);

        jLabel14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Rooms:");
        add(jLabel14);
        jLabel14.setBounds(40, 160, 70, 20);

        jComboBox1.addItem("Select Studio");
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1);
        jComboBox1.setBounds(440, 60, 120, 25);

        jButton3.setText("Create Session");
        add(jButton3);
        jButton3.setBounds(340, 350, 140, 26);

        jButton2.setText("Invite Musicians");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(170, 350, 140, 26);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Available Studio:");
        add(jLabel4);
        jLabel4.setBounds(320, 60, 130, 20);

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });
        jXDatePicker1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jXDatePicker1PropertyChange(evt);
            }
        });
        add(jXDatePicker1);
        jXDatePicker1.setBounds(160, 60, 140, 26);

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("End time:");
        add(jLabel6);
        jLabel6.setBounds(200, 110, 80, 20);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Start time:");
        add(jLabel5);
        jLabel5.setBounds(40, 110, 80, 20);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Create New Session");
        add(jLabel3);
        jLabel3.setBounds(0, 10, 850, 40);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Session's date:");
        add(jLabel2);
        jLabel2.setBounds(40, 60, 130, 20);

        jSpinner3.setModel(new SpinnerDateModel());
        jSpinner3.setEditor(new JSpinner.DateEditor(jSpinner3, "HH:mm"));
        add(jSpinner3);
        jSpinner3.setBounds(280, 110, 60, 24);

        jSpinner2.setModel(new SpinnerDateModel());
        jSpinner2.setEditor(new JSpinner.DateEditor(jSpinner2, "HH:mm"));
        add(jSpinner2);
        jSpinner2.setBounds(120, 110, 60, 24);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/container3.png"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 850, 580);
    }// </editor-fold>//GEN-END:initComponents

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        jXDatePicker1.setEditable(false);
        if (jXDatePicker1.getDate() == null) {
            return;
        }
        Date selectedDate = new Date(jXDatePicker1.getDate().getTime()); 
        Date selectedStart = new Date(((java.util.Date) jSpinner2.getValue()).getTime());
        Date selectedEnd = new Date(((java.util.Date) jSpinner3.getValue()).getTime());
        
        HashMap<Integer, ArrayList<Integer>> studiosRooms = csController.getAvailableStudioRooms(selectedDate, selectedStart, selectedEnd);
        for (Integer studio : studiosRooms.keySet()) {
            jComboBox1.addItem(String.valueOf(studio));
        }
        
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jXDatePicker1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jXDatePicker1PropertyChange
        
    }//GEN-LAST:event_jXDatePicker1PropertyChange

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem() == null || jComboBox1.getSelectedIndex() == 0) {
            return;
        }
        if (jSpinner2.getValue().equals(jSpinner3.getValue())) {
            JOptionPane.showMessageDialog(WindowManager.getMainFrame(),
                "End time must be greater than start time",
                "Input Warning",
                JOptionPane.WARNING_MESSAGE);
            jComboBox1.setSelectedIndex(0);
            return;
        }
        jLabel8.setText("Name: ");
        jLabel9.setText("Address: ");
        jLabel10.setText("Email: ");
        jLabel11.setText("Phone number: ");
        jLabel12.setText("Description: ");
        Date selectedDate = new Date(jXDatePicker1.getDate().getTime()); 
        java.util.Date selectedStart = jXDatePicker1.getDate();
        selectedStart.setHours(((java.util.Date)jSpinner2.getValue()).getHours());
        selectedStart.setMinutes(((java.util.Date) jSpinner2.getValue()).getMinutes());
        java.util.Date selectedEnd = jXDatePicker1.getDate();
        selectedEnd.setHours(((java.util.Date) jSpinner3.getValue()).getHours());
        selectedEnd.setMinutes(((java.util.Date) jSpinner3.getValue()).getMinutes());

        HashMap<Integer, ArrayList<Integer>> studiosRooms = csController.getAvailableStudioRooms(selectedDate, selectedStart, selectedEnd);
        for (Map.Entry<Integer, ArrayList<Integer>> entries : studiosRooms.entrySet()) {
            Integer key = entries.getKey();
            ArrayList<Integer> value =  entries.getValue();
            
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                    public boolean isCellEditable(int row, int col) {
                         switch (col) {
                             case 2:
                                 return true;
                             default:
                                 return false;
                          }
                    }
            }; 
            jTable1.setModel(model);
            model.addColumn("Room No."); 
            model.addColumn("Rec. Cell"); 
            model.addColumn("Reserve");
            TableColumn tc = jTable1.getColumnModel().getColumn(1);
            tc.setCellEditor(jTable1.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(jTable1.getDefaultRenderer(Boolean.class));
            TableColumn tc2 = jTable1.getColumnModel().getColumn(2);
            tc2.setCellEditor(jTable1.getDefaultEditor(Boolean.class));
            tc2.setCellRenderer(jTable1.getDefaultRenderer(Boolean.class));
            if (String.valueOf(key).equals(String.valueOf(jComboBox1.getSelectedItem()))) {
                try {
                    model.setRowCount(0);
                    for (Integer room : value) {
                        Room tmpRoom = csController.getRoom(key, room);
                        model.addRow(new Object[]{tmpRoom.getRoomNum(),tmpRoom.isRecordingCell(), false});
                    }
                    ResultSet rs = SessionsInTheRoom.getDB().query("SELECT tblStudio.*\n" +
                                                           "FROM tblStudio\n" +
                                                           "WHERE tblStudio.studioNumber="+key+";");
                    while (rs.next()) {                        
                        jLabel8.setText(jLabel8.getText()+" "+rs.getString(2));
                        jLabel9.setText(jLabel9.getText()+" "+rs.getString(6));
                        jLabel10.setText(jLabel10.getText()+" "+rs.getString(4));
                        jLabel11.setText(jLabel11.getText()+" "+rs.getString(5));
                        jLabel12.setText(jLabel12.getText()+" "+rs.getString(3));
                    }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreateSession.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (jTable1.getSelectedRow() > -1) {
                    }                
                }
            });
        }
        DefaultTableModel model = new DefaultTableModel() {
                @Override
                    public boolean isCellEditable(int row, int col) {
                         if (getValueAt(row, col) == null) {
                            return false;
                        } else return true;
                    }
            }; 
            jTable2.setModel(model);
            model.addColumn("Soundman ID");
            model.addColumn("Name");
            model.addColumn("Producer"); 
            model.addColumn("Mix tech.");
            model.addColumn("Master tech.");
            model.addColumn("Total pay");
            model.addColumn("Advanced pay");
            TableColumn tc = jTable2.getColumnModel().getColumn(2);
            tc.setCellEditor(jTable2.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(jTable2.getDefaultRenderer(Boolean.class));
            TableColumn tc2 = jTable2.getColumnModel().getColumn(3);
            tc2.setCellEditor(jTable2.getDefaultEditor(Boolean.class));
            tc2.setCellRenderer(jTable2.getDefaultRenderer(Boolean.class));
            TableColumn tc3 = jTable2.getColumnModel().getColumn(4);
            tc3.setCellEditor(jTable2.getDefaultEditor(Boolean.class));
            tc3.setCellRenderer(jTable2.getDefaultRenderer(Boolean.class));
            jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (jTable2.getSelectedRow() > -1) {
                    }                
                }
            });
        int selectedStud = Integer.valueOf(String.valueOf(jComboBox1.getSelectedItem()));
        HashMap<Integer,SoundMan> availableSoundmans = csController.getAvailableSoundmans(selectedDate, selectedStart, selectedEnd,selectedStud);
        for (Map.Entry<Integer, SoundMan> entries : availableSoundmans.entrySet()) {
            Integer key = entries.getKey();
            SoundMan value =  entries.getValue();
            model.addRow(new Object[]{key,value.getFreelancerName(),
                                          value.isProducer()?null:false,
                                          value.isMixTech()?null:false,
                                          value.isMasterTech()?null:false,
                                          value.getTotalPayment(),
                                          value.getAdvancePay()});
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange

    }//GEN-LAST:event_jTable1PropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jXDatePicker1.getDate() == null) {
            return;
        }
        ArrayList<String> rooms = new ArrayList();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if ((Boolean)jTable1.getValueAt(i, 2)) {
                    rooms.add(String.valueOf(jTable1.getValueAt(i, 0)));
            }
        }
        jPanel1.setVisible(true);
        jPanel1.setBounds(40, 390, 700, 170);
        Date selectedDate = new Date(jXDatePicker1.getDate().getTime()); 
        Date selectedStart = new Date(((java.util.Date) jSpinner2.getValue()).getTime());
        Date selectedEnd = new Date(((java.util.Date) jSpinner3.getValue()).getTime());
        DefaultTableModel model = new DefaultTableModel();
        jTable3.setModel(model);
        model.addColumn("Musician ID"); 
        model.addColumn("Specialization");
        model.addColumn("Name"); 
        model.addColumn("Wage"); 
        model.addColumn("Rank"); 
        model.addColumn("Invite");
        model.addColumn("Room"); 
        TableColumn tc = jTable3.getColumnModel().getColumn(5);
        tc.setCellEditor(jTable3.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(jTable3.getDefaultRenderer(Boolean.class));
        TableColumn tc2 = jTable3.getColumnModel().getColumn(6);
        tc2.setCellEditor(new DefaultCellEditor(new JComboBox<String>(rooms.toArray(new String[rooms.size()]))));
        int selectedStud = Integer.valueOf(String.valueOf(jComboBox1.getSelectedItem()));
        HashMap<Integer, Musician> availableMusicition = csController.getAvailableMusicition(selectedDate, selectedStart, selectedEnd,selectedStud);
        for (Map.Entry<Integer, Musician> entries : availableMusicition.entrySet()) {
            Integer key = entries.getKey();
            Musician value =  entries.getValue();
            model.addRow(new Object[]{key,value.getType(),value.getName(),value.getCommission(),value.getRank(),false,"Select Room"});
        }
        jTable3.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (jTable3.getSelectedRow() > -1) {
                    if (jTable3.getSelectedColumn()==6 && String.valueOf(jTable3.getValueAt(jTable3.getSelectedRow(), 5)).equals("false")) {
                        JOptionPane.showMessageDialog(WindowManager.getMainFrame(),
                            "Please invite the musician first",
                            "Input Warning",
                            JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }       
            }
        });
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    // End of variables declaration//GEN-END:variables
}
